{"version":3,"sources":["components/projects/Item.js","components/projects/List.js","App.js","serviceWorker.js","index.js"],"names":["Item","this","props","info","name","date","id","description","className","Component","defaultProps","List","list","data","map","project","key","App","state","projects","handleCreate","setState","concat","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iNAEMA,G,uLAWM,IAAD,EAGHC,KAAKC,MAAMC,KADbC,EAFK,EAELA,KAAMC,EAFD,EAECA,KAAMC,EAFP,EAEOA,GAAKC,EAFZ,EAEYA,YAEnB,OACE,yBAAKC,UAAW,QACd,yBAAKA,UAAW,QACd,6BAAMF,GACN,6BAAMF,GACN,6BAAMC,GACN,6BAAME,S,GArBGE,cAAbT,EAEGU,aAAe,CACpBP,KAAM,CACJG,GAAI,EACJF,KAAM,eACNC,KAAO,QACPE,YAAc,SAqBLP,QC1BTW,E,iLAIM,IAEFC,EADWX,KAAKC,MAAdW,KACUC,KAChB,SAAAC,GAAO,OAAK,kBAAC,EAAD,CAAMC,IAAKD,EAAQT,GAAIH,KAAMY,OAG3C,OACE,yBAAKP,UAAW,QACXI,O,GAZQH,aAAbE,EACGD,aAAe,CACpBG,KAAM,IAgBKF,Q,6jBCuCAM,E,2MArDbC,MAAQ,CACNC,SAAW,CACT,CACEb,GAAI,EACJF,KAAO,WACPC,KAAO,QACPE,YAAc,QACd,CACAD,GAAI,EACJF,KAAO,WACPC,KAAO,KACPE,YAAc,QACd,CACAD,GAAI,EACJF,KAAO,WACPC,KAAO,OACPE,YAAc,QACd,CACAD,GAAI,EACJF,KAAO,WACPC,KAAO,OACPE,YAAc,QACd,CACAD,GAAI,EACJF,KAAO,WACPC,KAAO,OACPE,YAAc,U,EAIpBa,aAAe,SAACP,GAAU,IAChBM,EAAa,EAAKD,MAAlBC,SACR,EAAKE,SAAS,CACZF,SAAUA,EAASG,OAAT,GAAkBhB,GAAI,EAAKA,MAASO,O,wEAIhD,OACE,yBAAKL,UAAU,OACb,4BAAQA,UAAU,UAChB,6CAKF,6BAASA,UAAW,YAClB,kBAAC,EAAD,CAAMK,KAAMZ,KAAKiB,MAAMC,iB,GAhDfV,aCMEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.4f6fccf6.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\n\r\nclass Item extends Component {\r\n\r\n  static defaultProps = {\r\n    info: {\r\n      id: 0,\r\n      name: '이름',\r\n      date : \"11111\",\r\n      description : \"dede\"\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      name, date, id , description\r\n    } = this.props.info;\r\n    return (\r\n      <div className={\"chip\"}>\r\n        <div className={\"item\"}>\r\n          <div>{id}</div>\r\n          <div>{name}</div>\r\n          <div>{date}</div>\r\n          <div>{description}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Item;\r\n","import React, {Component} from \"react\";\r\n\r\nimport Item from \"./Item\";\r\n\r\nclass List extends Component {\r\n  static defaultProps = {\r\n    data: []\r\n  }\r\n  render() {\r\n    const { data } = this.props;\r\n    const list = data.map(\r\n      project => (<Item key={project.id} info={project}/>)\r\n    );\r\n\r\n    return(\r\n      <div className={\"list\"}>\r\n          {list}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default List;\r\n","import React, {Component} from 'react';\nimport './resources/scss/style.scss'\n\nimport List from './components/projects/List';\n\n\nclass App extends Component {\n\n  state = {\n    projects : [\n      {\n        id: 0,\n        name : \"project1\",\n        date : \"11111\",\n        description : \"dede\"\n      },{\n        id: 1,\n        name : \"project2\",\n        date : \"22\",\n        description : \"dede\"\n      },{\n        id: 2,\n        name : \"project3\",\n        date : \"3333\",\n        description : \"dede\"\n      },{\n        id: 3,\n        name : \"project4\",\n        date : \"3333\",\n        description : \"dede\"\n      },{\n        id: 4,\n        name : \"project5\",\n        date : \"3333\",\n        description : \"dede\"\n      }\n    ]\n  }\n  handleCreate = (data) => {\n    const { projects } = this.state;\n    this.setState({\n      projects: projects.concat({ id: this.id++, ...data })\n    })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"header\">\n          <p>\n            Project List!\n          </p>\n\n        </header>\n        <section className={\"contents\"}>\n          <List data={this.state.projects}/>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}