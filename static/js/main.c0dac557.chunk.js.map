{"version":3,"sources":["components/Menu.js","components/Main.js","components/Projects.js","components/Profile.js","pages/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["Menu","className","id","href","Main","Projects","Profile","FullpageWrapper","origin","destination","direction","console","log","index","Fragment","anchors","scrollOverflow","onLeave","this","bind","afterLoad","render","state","fullpageApi","onClick","moveTo","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qQAYeA,MAVf,WACE,OACE,yBAAKC,UAAU,OAAOC,GAAG,QAC3B,uBAAGC,KAAK,SAAR,QACA,uBAAGA,KAAK,YAAR,WACA,uBAAGA,KAAK,aAAR,cCQaC,MAZf,WACE,OACE,yBAAKH,UAAU,QACjB,yBAAKA,UAAW,WAEhB,wBAAIA,UAAW,SAAf,cAEA,oCCqCaI,MA5Cf,WACE,OACE,yBAAKJ,UAAU,IAEH,yCACA,yCACA,yCACA,yCACA,yCACA,yCACA,yCACA,yCACA,yCACA,yCACA,yCACA,yCACA,yCACA,yCACA,yCACA,6CACA,yCACA,yCACA,yCACA,yCACA,yCACA,yCACA,yCACA,yCACA,6CACA,yCACA,yCACA,yCACA,yCACA,yCACA,yCACA,yCACA,yCACA,yCACA,yCACA,+CC/BDK,MARf,WACE,OACE,yBAAKL,UAAU,IACjB,qDCiDaM,E,gLA1CNC,EAAQC,EAAaC,GAC5BC,QAAQC,IAAI,mBAAqBJ,EAAOK,S,gCAE/BL,EAAQC,EAAaC,GAC9BC,QAAQC,IAAI,eAAiBH,EAAYI,S,+BAIzC,OACC,kBAAC,IAAMC,SAAP,KACC,4BAAQb,UAAW,UAClB,kBAAC,EAAD,OAED,kBAAC,IAAD,CACCc,QAAU,CAAC,OAAQ,UAAW,YAC9BC,gBAAgB,EAChBC,QAASC,KAAKD,QAAQE,KAAKD,MAC3BE,UAAWF,KAAKE,UAAUD,KAAKD,MAC/BG,OAAQ,YAA4B,EAAzBC,MAA0B,IAAnBC,EAAkB,EAAlBA,YACjB,OACC,yBAAKrB,GAAG,oBACP,yBAAKD,UAAU,wBACd,kBAAC,EAAD,OAED,yBAAKA,UAAU,2BACd,kBAAC,EAAD,OAED,yBAAKA,UAAU,4BACd,kBAAC,EAAD,MACA,4BAAQuB,QAAS,kBAAMD,EAAYE,OAAO,EAAG,KAA7C,sB,GA9BqBC,IAAMC,WCCrBC,MARf,WACE,OACE,yBAAK3B,UAAU,OAChB,kBAAC,EAAD,QCIiB4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASb,OAAO,kBAAC,EAAD,MAASc,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c0dac557.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Menu() {\n  return (\n    <div className=\"menu\" id=\"Menu\">\n\t\t<a href=\"#home\">Home</a>\n\t\t<a href=\"#profile\">Profile</a>\n\t\t<a href=\"#projects\">Projects</a>\n    </div>\n  );\n}\n\nexport default Menu;\n","import React from 'react';\n\n\nfunction Main() {\n  return (\n    <div className=\"main\">\n\t\t<div className={\"wrapper\"}>\n\n\t\t<h1 className={\"title\"}>Portfolio</h1>\n\t\t</div>\n\t\t<h2>EK</h2>\n    </div>\n  );\n}\n\nexport default Main;\n","import React from 'react';\n\n\nfunction Projects() {\n  return (\n    <div className=\"\">\n\n                <h3>Section 3</h3>\n                <h3>Section 3</h3>\n                <h3>Section 3</h3>\n                <h3>Section 3</h3>\n                <h3>Section 3</h3>\n                <h3>Section 3</h3>\n                <h3>Section 3</h3>\n                <h3>Section 3</h3>\n                <h3>Section 3</h3>\n                <h3>Section 3</h3>\n                <h3>Section 3</h3>\n                <h3>Section 3</h3>\n                <h3>Section 3</h3>\n                <h3>Section 3</h3>\n                <h3>Section 3</h3>\n                <h3>Sectioerern 3</h3>\n                <h3>Section 3</h3>\n                <h3>Section 3</h3>\n                <h3>Section 3</h3>\n                <h3>Section 3</h3>\n                <h3>Section 3</h3>\n                <h3>Section 3</h3>\n                <h3>Section 3</h3>\n                <h3>Section 3</h3>\n                <h3>Sectioerern 3</h3>\n                <h3>Section 3</h3>\n                <h3>Section 3</h3>\n                <h3>Section 3</h3>\n                <h3>Section 3</h3>\n                <h3>Section 3</h3>\n                <h3>Section 3</h3>\n                <h3>Section 3</h3>\n                <h3>Section 3</h3>\n                <h3>Section 3</h3>\n                <h3>Section 3</h3>\n                <h3>Section tttt3</h3>\n    </div>\n  );\n}\n\nexport default Projects;\n","import React from 'react';\n\n\nfunction Profile() {\n  return (\n    <div className=\"\">\n\t\t<p>superek127@gmail.com</p>\n    </div>\n  );\n}\n\nexport default Profile;\n","/* eslint-disable import/no-extraneous-dependencies */\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"fullpage.js/vendors/scrolloverflow\"; // Optional. When using scrollOverflow:true\nimport ReactFullpage from '@fullpage/react-fullpage';\n\nimport Menu from '../components/Menu';\nimport Main from '../components/Main';\nimport Projects from '../components/Projects';\nimport Profile from '../components/Profile';\n\n\nclass FullpageWrapper extends React.Component {\n\tonLeave(origin, destination, direction) {\n\t\tconsole.log(\"Leaving section \" + origin.index);\n\t}\n\tafterLoad(origin, destination, direction) {\n\t\tconsole.log(\"After load: \" + destination.index);\n\t}\n\n \trender() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<header className={\"header\"}>\n\t\t\t\t\t<Menu />\n\t\t\t\t</header>\n\t\t\t\t<ReactFullpage\n\t\t\t\t\tanchors={ ['home', 'profile', 'projects']}\n\t\t\t\t\tscrollOverflow={true}\n\t\t\t\t\tonLeave={this.onLeave.bind(this)}\n\t\t\t\t\tafterLoad={this.afterLoad.bind(this)}\n\t\t\t\t\trender={({ state, fullpageApi }) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div id=\"fullpage-wrapper\">\n\t\t\t\t\t\t\t\t<div className=\"section section-home\">\n\t\t\t\t\t\t\t\t\t<Main />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"section section-profile\">\n\t\t\t\t\t\t\t\t\t<Profile />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"section section-projects\">\n\t\t\t\t\t\t\t\t\t<Projects/>\n\t\t\t\t\t\t\t\t\t<button onClick={() => fullpageApi.moveTo(1, 0)}>\n\t\t\t\t\t\t\t\t\tMove top\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\nexport default FullpageWrapper;\n","import React from 'react';\nimport './App.scss';\n\nimport FullpageWrapper from './pages/Wrapper';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\t  <FullpageWrapper />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}